
//!function () {
//    "use strict"; function r() {
//        function r(r, n, e, t) {
//            function a(r) { var n = r.replace(u, ""); return n !== r && (t.$setViewValue(n), t.$render()), n }
//            function i(r) {
//                var n = r.split(""), e = n.pop(), t = 0; if (o.test(r)) return !1; if (l.test(r)) return !1; n.reverse(), n.forEach(function (r, n, e)
//                { var a = n + 2; t += parseInt(r) * a }); var a = t % 11; return a < 2 ? e == a : e == 11 - a
//            } var u = /[^0-9]/g, o = /^\D*(\d)(?:\D*|\1)*$/, l = /^000/; if (!t) return void console.warn("ngModelCtrl does not exist!");
//            t.$parsers.push(a), t.$validators.iranNationalId = function (r, n) {
//                return i(r || n)
//            }
//        }
//        return { require: "?ngModel", restrict: "A", link: r }
//    }
//    angular.module("angular-iran-national-id", []),
//    angular.module("angular-iran-national-id").directive("isletIranNationalId", r)
//}();

/**
 * angular-iran-national-id v1.3.0
 * AngularJS 1.x directive that will validate an IRANIAN national ID and impose relevant character and structure limits
 * @link https://github.com/sszdh/angular-iran-national-id
 * @author Soheil Samadzadeh <s.samadzadeh@islet.ir (http://www.islet.ir)
 * @example <input ng-model="nationalid" maxlength="10" min-length="10" islet-iran-national-id />
 * @license under MIT
 */
; (function () {
    "use strict";

    angular.module('angular-iran-national-id', []);

    /**
     * @desc directive that will validate an IRANIAN national ID and impose relevant character and structure limits
     * @example <input ng-model="nationalid" maxlength="10" min-length="10" islet-iran-national-id />
     * @todo: Structure code in human-readable format (ex: xxx-xxxxxx-x)
    **/
    angular
        .module('angular-iran-national-id')
        .directive('isletIranNationalId', iranNationalId);

    function iranNationalId() {
        var directive = {
            require: '?ngModel',
            restrict: 'A',
            link: link
        };
        return directive;

        function link(scope, element, attrs, ngModelCtrl) {
            var REGEX_DIGITS = /[^0-9]/g;
            var REGEX_EQUAL_DIGITS = /^\D*(\d)(?:\D*|\1)*$/;
            var REGEX_LEADING_ZERO = /^000/;

            if (!ngModelCtrl) {
                console.warn('ngModelCtrl does not exist!');
                return;
            }

            // Push custom parser to pipline
            ngModelCtrl.$parsers.push(parseToNumber);

            // Push custom validator to model validators collection
            ngModelCtrl.$validators.iranNationalId = function (modelValue, viewValue) {
                var value = modelValue || viewValue;
                return check(value);
            };

            // Parse the view value to number only.
            function parseToNumber(value) {
                var transformedValue = value.replace(REGEX_DIGITS, '');

                if (transformedValue !== value) {
                    ngModelCtrl.$setViewValue(transformedValue);
                    ngModelCtrl.$render();
                }

                return transformedValue;
            }

            // National Code check algorithm
            function check(code) {
                if (code != undefined) {
                    var digitArray = code.split('');
                    var checkDigit = digitArray.pop();
                    var sigma = 0;

                    // Prevent same digits
                    if (REGEX_EQUAL_DIGITS.test(code)) {
                        return false;
                    }

                    // Prevent leading 3-zero digits
                    if (REGEX_LEADING_ZERO.test(code)) {
                        return false;
                    }

                    digitArray.reverse();
                    digitArray.forEach(function (item, index, array) {
                        var pos = index + 2;
                        sigma += (parseInt(item) * pos);
                    });

                    var r = sigma % 11;
                    return r < 2
                        ? checkDigit == r
                        : checkDigit == 11 - r
                }
            }
        }
    }
}());
